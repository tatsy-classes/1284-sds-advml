Traceback (most recent call last):
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from IPython import display
from matplotlib.animation import ArtistAnimation

fig = plt.figure()
ax = fig.gca()
frames = []

stk = []
stk.append(problem.copy())
solution = None

while len(stk) != 0:
    P = stk.pop()
    frame = draw_frame(P, fig, ax)
    frames.append(frame)
    success = True
    for i, j in product(range(P.shape[0]), range(P.shape[1])):
        if P[i, j] == 0:
            success = False
            row_nums = P[i, :]
            col_nums = P[:, j]
            k = 3 * (i // 3)
            l = 3 * (j // 3)
            blk_nums = P[k : k + 3, l : l + 3].flatten()

            used_nums = np.concatenate([row_nums, col_nums, blk_nums])
            unused_nums = [n for n in range(10) if not n in used_nums]
            for n in unused_nums:
                new_P = P.copy()
                new_P[i, j] = n
                stk.append(new_P)

            # if the first empty cell is found, then,
            # we don't need to see the following cells anymore.
            break

    if success:
        solution = P.copy()
        break

ani = ArtistAnimation(fig, frames, interval=100, blit=True)
html = display.HTML(ani.to_html5_video())
display.display(html)
plt.close()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [0;32mIn[13], line 42[0m
[1;32m     39[0m         [38;5;28;01mbreak[39;00m
[1;32m     41[0m ani [38;5;241m=[39m ArtistAnimation(fig, frames, interval[38;5;241m=[39m[38;5;241m100[39m, blit[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m---> 42[0m html [38;5;241m=[39m display[38;5;241m.[39mHTML([43mani[49m[38;5;241;43m.[39;49m[43mto_html5_video[49m[43m([49m[43m)[49m)
[1;32m     43[0m display[38;5;241m.[39mdisplay(html)
[1;32m     44[0m plt[38;5;241m.[39mclose()

File [0;32m~/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/matplotlib/animation.py:1284[0m, in [0;36mAnimation.to_html5_video[0;34m(self, embed_limit)[0m
[1;32m   1281[0m path [38;5;241m=[39m Path(tmpdir, [38;5;124m"[39m[38;5;124mtemp.m4v[39m[38;5;124m"[39m)
[1;32m   1282[0m [38;5;66;03m# We create a writer manually so that we can get the[39;00m
[1;32m   1283[0m [38;5;66;03m# appropriate size for the tag[39;00m
[0;32m-> 1284[0m Writer [38;5;241m=[39m [43mwriters[49m[43m[[49m[43mmpl[49m[38;5;241;43m.[39;49m[43mrcParams[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43manimation.writer[39;49m[38;5;124;43m'[39;49m[43m][49m[43m][49m
[1;32m   1285[0m writer [38;5;241m=[39m Writer(codec[38;5;241m=[39m[38;5;124m'[39m[38;5;124mh264[39m[38;5;124m'[39m,
[1;32m   1286[0m                 bitrate[38;5;241m=[39mmpl[38;5;241m.[39mrcParams[[38;5;124m'[39m[38;5;124manimation.bitrate[39m[38;5;124m'[39m],
[1;32m   1287[0m                 fps[38;5;241m=[39m[38;5;241m1000.[39m [38;5;241m/[39m [38;5;28mself[39m[38;5;241m.[39m_interval)
[1;32m   1288[0m [38;5;28mself[39m[38;5;241m.[39msave([38;5;28mstr[39m(path), writer[38;5;241m=[39mwriter)

File [0;32m~/.cache/pypoetry/virtualenvs/sds-adv-ml-t6Z6UgPC-py3.9/lib/python3.9/site-packages/matplotlib/animation.py:148[0m, in [0;36mMovieWriterRegistry.__getitem__[0;34m(self, name)[0m
[1;32m    146[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mis_available(name):
[1;32m    147[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_registered[name]
[0;32m--> 148[0m [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRequested MovieWriter ([39m[38;5;132;01m{[39;00mname[38;5;132;01m}[39;00m[38;5;124m) not available[39m[38;5;124m"[39m)

[0;31mRuntimeError[0m: Requested MovieWriter (ffmpeg) not available

